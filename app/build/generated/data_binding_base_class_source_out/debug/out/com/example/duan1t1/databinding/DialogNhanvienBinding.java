// Generated by view binder compiler. Do not edit!
package com.example.duan1t1.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.EditText;
import android.widget.LinearLayout;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.appcompat.widget.AppCompatButton;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.duan1t1.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class DialogNhanvienBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final AppCompatButton btnHuy;

  @NonNull
  public final AppCompatButton btnLuu;

  @NonNull
  public final EditText edtEmail;

  @NonNull
  public final EditText edtHoTen;

  @NonNull
  public final EditText edtSdt;

  private DialogNhanvienBinding(@NonNull LinearLayout rootView, @NonNull AppCompatButton btnHuy,
      @NonNull AppCompatButton btnLuu, @NonNull EditText edtEmail, @NonNull EditText edtHoTen,
      @NonNull EditText edtSdt) {
    this.rootView = rootView;
    this.btnHuy = btnHuy;
    this.btnLuu = btnLuu;
    this.edtEmail = edtEmail;
    this.edtHoTen = edtHoTen;
    this.edtSdt = edtSdt;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static DialogNhanvienBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static DialogNhanvienBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.dialog_nhanvien, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static DialogNhanvienBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.btn_Huy;
      AppCompatButton btnHuy = ViewBindings.findChildViewById(rootView, id);
      if (btnHuy == null) {
        break missingId;
      }

      id = R.id.btn_Luu;
      AppCompatButton btnLuu = ViewBindings.findChildViewById(rootView, id);
      if (btnLuu == null) {
        break missingId;
      }

      id = R.id.edt_email;
      EditText edtEmail = ViewBindings.findChildViewById(rootView, id);
      if (edtEmail == null) {
        break missingId;
      }

      id = R.id.edt_hoTen;
      EditText edtHoTen = ViewBindings.findChildViewById(rootView, id);
      if (edtHoTen == null) {
        break missingId;
      }

      id = R.id.edt_sdt;
      EditText edtSdt = ViewBindings.findChildViewById(rootView, id);
      if (edtSdt == null) {
        break missingId;
      }

      return new DialogNhanvienBinding((LinearLayout) rootView, btnHuy, btnLuu, edtEmail, edtHoTen,
          edtSdt);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
